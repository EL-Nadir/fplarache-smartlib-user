name: Deploy ECS Service

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: dev-fplarache-smartlib-users-repo
  ECS_CLUSTER: dev-fplarache-smartlib-users-cluster
  ECS_SERVICE: dev-fplarache-smartlib-users-service
  ECS_TASK_DEFINITION_FAMILY: dev-users-task-definition

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Java (JDK)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      # Step 3: Cache Maven dependencies
      - name: Cache Maven Repository
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build the Maven project
      - name: Build with Maven
        run: |
          mvn clean package -DskipTests

      # Step 5: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 6: Build Docker image
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=${{ secrets.AWS_ECR_REGISTRY }}/$ECR_REPOSITORY:latest
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      # Step 7: Register New Task Definition Revision
      - name: Register New Task Definition Revision
        id: register-task
        run: |
          TASK_JSON=$(jq -n --arg IMAGE "${{ secrets.AWS_ECR_REGISTRY }}/$ECR_REPOSITORY:latest" \
          --arg FAMILY "$ECS_TASK_DEFINITION_FAMILY" \
          --arg NAME "users-container" \
          '{
            family: $FAMILY,
            networkMode: "awsvpc",
            containerDefinitions: [
              {
                name: $NAME,
                image: $IMAGE,
                memory: 1024,
                cpu: 256,
                essential: true,
                logConfiguration: {
                  logDriver: "awslogs",
                  options: {
                    "awslogs-group": "/ecs/$FAMILY",
                    "awslogs-region": env.AWS_REGION,
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ],
            requiresCompatibilities: ["FARGATE"],
            cpu: "256",
            memory: "1024"
          }')
          echo "$TASK_JSON" > ecs/dev-users-task-definition.json

          NEW_TASK_DEFINITION=$(aws ecs register-task-definition --cli-input-json file://ecs/dev-users-task-definition.json --query "taskDefinition.taskDefinitionArn" --output text)
          echo "new-task-definition=$NEW_TASK_DEFINITION" >> $GITHUB_ENV

      # Step 8: Deploy ECS Service
      - name: Deploy ECS Service
        run: |
          SERVICE_EXISTS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --query "services[0].serviceName" --output text || echo "not_found")
          if [[ "$SERVICE_EXISTS" == "not_found" ]]; then
            echo "Creating ECS Service"
            aws ecs create-service \
              --cluster $ECS_CLUSTER \
              --service-name $ECS_SERVICE \
              --task-definition ${{ env.new-task-definition }} \
              --desired-count 1 \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[subnet-0cf9e8ccfb6fd0f77],securityGroups=[sg-09b08fa0cfc008eba],assignPublicIp=ENABLED}"
          else
            echo "Updating ECS Service"
            aws ecs update-service \
              --cluster $ECS_CLUSTER \
              --service $ECS_SERVICE \
              --task-definition ${{ env.new-task-definition }}
