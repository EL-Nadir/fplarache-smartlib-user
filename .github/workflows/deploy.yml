name: Deploy Maven Project to ECS

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-dev"
      - "v[0-9]+.[0-9]+.[0-9]+-prod"

env:
  BEFORE_SHA: ${{ github.event.before }}

jobs:
  deploy:
    name: "Deploy Maven Project"
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Extract Branch Name
      - name: Extract Branch Name
        shell: bash
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        id: extract_branch

      # Step 3: Set Variables Based on Environment
      - name: Set Variables
        id: vars
        run: |
          if [[ "${{ github.ref }}" == *-dev ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
            echo "awsAccessKey=DEV_ADMIN_AWS_ACCESS_KEY" >> $GITHUB_OUTPUT
            echo "awsSecretKey=DEV_ADMIN_AWS_SECRET_KEY" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == *-prod ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "awsAccessKey=PROD_ADMIN_AWS_ACCESS_KEY" >> $GITHUB_OUTPUT
            echo "awsSecretKey=PROD_ADMIN_AWS_SECRET_KEY" >> $GITHUB_OUTPUT
          fi

      # Step 4: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets[steps.vars.outputs.awsAccessKey] }}
          aws-secret-access-key: ${{ secrets[steps.vars.outputs.awsSecretKey] }}
          aws-region: "eu-north-1"

      # Step 5: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 6: Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=dev-fplarache-smartlib-user-repository:latest
          docker build -t ${{ steps.login-ecr.outputs.registry }}/$IMAGE_NAME .
          docker push ${{ steps.login-ecr.outputs.registry }}/$IMAGE_NAME

      # Step 7: Deploy to ECS
      - name: Deploy ECS Service
        run: |
          ECS_CLUSTER=dev-fplarache-smartlib-user-cluster
          ECS_SERVICE=dev-smartlib-user-service
          ECS_TASK_DEFINITION=dev-smartlib-user-td
          IMAGE_NAME=${{ steps.login-ecr.outputs.registry }}/dev-fplarache-smartlib-user-repository:${{ github.sha }}

          # Register a new task definition revision
          TASK_JSON=$(aws ecs register-task-definition \
            --family $ECS_TASK_DEFINITION \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu "256" \
            --memory "512" \
            --container-definitions "[
              {
                \"name\": \"user-container\",
                \"image\": \"$IMAGE_NAME\",
                \"memory\": 512,
                \"cpu\": 256,
                \"essential\": true,
                \"logConfiguration\": {
                  \"logDriver\": \"awslogs\",
                  \"options\": {
                    \"awslogs-group\": \"/ecs/$ECS_TASK_DEFINITION\",
                    \"awslogs-region\": \"eu-north-1\",
                    \"awslogs-stream-prefix\": \"ecs\"
                  }
                }
              }
            ]")
          TASK_DEFINITION_ARN=$(echo "$TASK_JSON" | jq -r '.taskDefinition.taskDefinitionArn')

          # Update ECS Service
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $TASK_DEFINITION_ARN \
            --force-new-deployment
