name: Deploy Maven Project to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  ECR_REPOSITORY: dev-fplarache-smartlib-users-repo
  ECS_CLUSTER: dev-fplarache-smartlib-users-cluster
  ECS_TASK_DEFINITION_FAMILY: dev-users-task-definition
  CONTAINER_NAME: users-container

jobs:
  deploy:
    name: Deploy Maven Project
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
          IMAGE_TAG: latestgir
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Render ECS Task Definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs/dev-users-task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.image }}

      - name: Ensure ECS Service Exists or Update
        run: |
          set -e
          SERVICE_EXISTS=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_CLUSTER-service --query "services[0].serviceName" --output text || echo "not_found")
          if [[ "$SERVICE_EXISTS" == "not_found" ]]; then
            echo "Creating ECS Service"
            aws ecs create-service \
              --cluster $ECS_CLUSTER \
              --service-name $ECS_CLUSTER-service \
              --task-definition ${{ steps.render-task.outputs.task-definition }} \
              --desired-count 1 \
              --launch-type FARGATE
          else
            echo "Updating ECS Service"
            aws ecs update-service \
              --cluster $ECS_CLUSTER \
              --service $ECS_CLUSTER-service \
              --task-definition ${{ steps.render-task.outputs.task-definition }}
          fi

      - name: Deploy ECS Task Definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task.outputs.task-definition }}
          service: $ECS_CLUSTER-service
          cluster: $ECS_CLUSTER
          wait-for-service-stability: true
