name: Deploy Maven Project

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-dev"
      - "v[0-9]+.[0-9]+.[0-9]+-prod"

env:
  BEFORE_SHA: ${{ github.event.before }}

jobs:
  setup:
    name: "Deploy Maven Project"
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Step 2: Set up Java
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      # Step 3: Build Maven project
      - name: Build Maven project
        run: |
          mvn clean install -DskipTests

      # Step 4: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Step 5: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 6: Publish API image - Maven
      - name: Publish API image - Maven
        id: publish-api-image
        uses: ./.github/actions/publish-api-image
        with:
          dockerfile: ./Dockerfile
          cmd: java -jar target/*.jar
          image-short-name: dev-fplarache-smartlib-users-repo
          image-prefix: ${{ github.sha }}
          image-tag: latest
          ecr-registry: ${{ secrets.AWS_ECR_REGISTRY }}
          image-full-name: ${{ secrets.AWS_ECR_REGISTRY }}/dev-fplarache-smartlib-users-repo:${{ github.sha }}

      # Step 7: Install jq
      - name: Install jq
        run: sudo apt-get install jq

      # Step 8: Deploy ECS - Maven
      - name: Deploy ECS - Maven
        env:
          ECS_CLUSTER: ${{ github.sha }}-fgcluster
          ECS_SERVICE: ${{ github.sha }}-fgservice
        run: |
          TASK_JSON="$(aws ecs update-service --force-new-deployment --cluster ${ECS_CLUSTER} --service ${ECS_SERVICE})"
          TASK_ARN="$(printf '%s' "${TASK_JSON}"|jq -r '.service.deployments[0].id')"
          echo "deployment-arn=$TASK_ARN" >> $GITHUB_OUTPUT
